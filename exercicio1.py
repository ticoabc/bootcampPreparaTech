# -*- coding: utf-8 -*-
"""exercicio1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Wl-wL_vUtKHPHl_v-euEz9jeriuurnsZ

A fórmula de Bhaskara é um método resolutivo para equações do segundo grau utilizado para encontrar raízes a partir dos coeficientes da equação.
"""

def bsk():
  a =  float(input('Digite um número: '))
  b =  float(input('Digite um número: '))
  c =  float(input('Digite um número: '))
  delta = (b**2) - 4 * a * c
  #print(delta)
  x1 = (-(b) + (delta**0.5)) / 2 * a
  x2 = (-(b) - (delta**0.5)) / 2 * a
  print(delta)
  print(x1)
  print(x2)

def vlm():
  ds =  float(input('Digite o deslocamento (m): '))
  dt =  float(input('Digite o intervalo de tempo (s): '))
  vlm = ds / dt
  #print('A velocidade média é: ')
  print(f'A velocidade média é: {vlm:.2f} m/s')

#Movimento retilíneo uniforme
def mru():
  so =  float(input('Digite a posição inicial (m): '))
  dv =  float(input('Digite a velocidade (m/s): '))
  dt =  float(input('Digite o intervalo de tempo (s): '))
  mru = so + (dv * dt)
  print(f'A posição final é: {mru:.2f} m')

#Movimento retilíneo uniformemente variado
def mruv():
  so =  float(input('Digite a posição inicial (m): '))
  dv =  float(input('Digite a velocidade inicial (m/s): '))
  da =  float(input('Digite a aceleração (m/s2): '))
  dt =  float(input('Digite o tempo (s): '))
  mruv = so + (dv * dt) + ((da * (dt**2))/2)
  print(f'A posição final é: {mruv:.2f} m')

